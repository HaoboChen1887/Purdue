        -:    0:Source:test_team.c
        -:    0:Graph:test_team.gcno
        -:    0:Data:test_team.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
        -:    2:#include "team.h"
        -:    3:
        1:    4:struct Team create_test_team() {
        1:    5:	struct Person people[] = {
        -:    6:		{.name = "Charles Ma", .favorite = &people[4]},
        -:    7:		{.name = "Jessie Chu", .favorite = &people[4]},
        -:    8:		{.name = "Shixin Meng", .favorite = &people[0]},
        -:    9:		{.name = "Yixin Chen", .favorite = &people[0]},
        -:   10:		{.name = "Haobo Chen", .favorite = &people[3]}
        -:   11:	};
        -:   12:
        1:   13:	return create_team("ECE264", 5, people);
        -:   14:}
        -:   15:
        1:   16:int main(int argc, char * argv[]) {
        1:   17:	struct Team team = create_test_team();
        1:   18:	fprint_team(&team, stdout);
        1:   19:	struct Person * search = find_person(&team, "Charles Ma");
        1:   20:	printf("The person %s is found at address %p\n", *search, search);
        1:   21:	struct Person * notfound = find_person(&team, "ZZ");
        1:   22:	printf("The person ZZ not found, the address returned is %p\n", notfound);
        1:   23:	add_person(&team, "Jessie Chu", "Charles Ma");
        1:   24:	printf("After adding a person with a same name to the team\n");
        1:   25:	fprint_team(&team, stdout);
        -:   26:
        1:   27:	add_person(&team, "BOSS", "Haobo Chen");
        1:   28:	printf("After adding a boss to the team\n");
        1:   29:	fprint_team(&team, stdout);
        -:   30:
        1:   31:	struct Person * todelete = detach_person(&team, "BOSS");
        1:   32:	printf("After deleting the boss from the team\n");
        1:   33:	fprint_team(&team, stdout);
        1:   34:	free_team(&team);
        -:   35:
        1:   36:	team.head = NULL;
        1:   37:	team.name = NULL;
        1:   38:	team.tail = NULL;
        1:   39:	printf("Empty team\n");
        1:   40:	fprint_team(&team, stdout);
        1:   41:	free_person(todelete);
        1:   42:	return EXIT_SUCCESS;
        -:   43:}
