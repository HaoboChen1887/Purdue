// $Id: $
// File name:   controller.sv
// Created:     2/13/2018
// Author:      Haoming Zhang
// Lab Section: 337-05
// Version:     1.0  Initial Design Entry
// Description: .

module controller
(
	input clk,
	input n_reset,
	input dr,
	input lc,
	input overflow,
	output reg cnt_up,
	output reg clear,
	output modwait,
	output reg [2:0] op,
	output reg [3:0] src1,
	output reg [3:0] src2,
	output reg [3:0] dest,
	output reg err
);

	typedef enum bit [4:0] {IDLE, STORE, ZERO, SORT1, SORT2, SORT3, SORT4, MUL1, ADD1, MUL2, SUB1, MUL3, ADD2, MUL4, SUB2, LOAD1, WAIT1, LOAD2, WAIT2, LOAD3, WAIT3, LOAD4, EIDLE} stateType;
	typedef enum bit [2:0] {NOP, COPY, LOADONE, LOADTWO, ADD, SUB, MUL} opType;
	stateType curr_state;
	stateType next_state;
	reg curr_modwait;
	reg next_modwait;
	opType temp;

	always_ff @(posedge clk, negedge n_reset)
	begin
		if(n_reset == 0)
		begin
			curr_state <= IDLE;
			curr_modwait <= 0;
		end
		else
		begin
			curr_state <= next_state;
			curr_modwait <= next_modwait;
		end
	end

	always_comb
	begin
		next_state = curr_state;
		case(curr_state)
			IDLE:
			begin
				if(dr == 1)
					next_state = STORE;
				else if(lc == 1)
					next_state = LOAD1;
				else
					next_state = IDLE;
			end

			STORE:
			begin
				if(dr == 1)
					next_state = ZERO;
				else
					next_state = EIDLE;
			end

			ZERO:
			begin
				next_state = SORT1;
			end

			SORT1:
			begin
				next_state = SORT2;
			end

			SORT2:
			begin
				next_state = SORT3;
			end

			SORT3:
			begin
				next_state = SORT4;
			end

			SORT4:
			begin
				next_state = MUL1;
			end

			MUL1:
			begin
				next_state = ADD1;
			end

			ADD1:
			begin
				if(overflow == 1)
					next_state = EIDLE;
				else
					next_state = MUL2;
			end

			MUL2:
			begin
				next_state = SUB1;
			end

			SUB1:
			begin
				if(overflow == 1)
					next_state = EIDLE;
				else
					next_state = MUL3;
			end

			MUL3:
			begin
				next_state = ADD2;
			end

			ADD2:
			begin
				if(overflow == 1)
					next_state = EIDLE;
				else
					next_state = MUL4;
			end

			MUL4:
			begin
				next_state = SUB2;
			end

			SUB2:
			begin
				if(overflow == 1)
					next_state = EIDLE;
				else
					next_state = IDLE;
			end

			LOAD1:
			begin
				next_state = WAIT1;
			end

			WAIT1:
			begin
				if(lc == 1)
					next_state = LOAD2;
				else
					next_state = WAIT1;
			end

			LOAD2:
			begin
				next_state = WAIT2;
			end

			WAIT2:
			begin
				if(lc == 1)
					next_state = LOAD3;
				else
					next_state = WAIT2;
			end

			LOAD3:
			begin
				next_state = WAIT3;
			end

			WAIT3:
			begin
				if(lc == 1)
					next_state = LOAD4;
				else
					next_state = WAIT3;
			end

			LOAD4:
			begin
				next_state = IDLE;
			end

			EIDLE:
			begin
				if(dr == 1)
					next_state = STORE;
				else if(lc == 1)
					next_state = LOAD1;
				else
					next_state = EIDLE;
			end
		endcase
	end

	always_comb
	begin
		cnt_up = 0;
		clear = 0;
		next_modwait = 1;
		temp = NOP;
		src1 = 0;
		src2 = 0;
		dest = 0;
		err = 0;
		next_modwait = curr_modwait;
		case(curr_state)
			IDLE:
			begin
				next_modwait = 0;
			end

			STORE:
			begin
				temp = LOADONE;
				dest = 5;
			end

			ZERO:
			begin
				temp = SUB;
				src1 = 0;
				src2 = 0;
				dest = 0;
				cnt_up = 1;
			end

			SORT1:
			begin
				temp = COPY;
				dest = 1;
				src1 = 2;
			end

			SORT2:
			begin
				temp = COPY;
				dest = 2;
				src1 = 3;
			end

			SORT3:
			begin
				temp = COPY;
				dest = 3;
				src1 = 4;
			end

			SORT4:
			begin
				temp = COPY;
				dest = 4;
				src1 = 5;
			end

			MUL1:
			begin
				temp = MUL;
				dest = 6;
				src1 = 1;
				src2 = 7;
			end

			ADD1:
			begin
				temp = ADD;
				dest = 0;
				src1 = 0;
				src2 = 6;
			end

			MUL2:
			begin
				temp = MUL;
				dest = 6;
				src1 = 2;
				src2 = 8;
			end

			SUB1:
			begin
				temp = SUB;
				dest = 0;
				src1 = 0;
				src2 = 6;
			end

			MUL3:
			begin
				temp = MUL;
				dest = 6;
				src1 = 3;
				src2 = 9;
			end

			ADD2:
			begin
				temp = ADD;
				dest = 0;
				src1 = 0;
				src2 = 6;
			end

			MUL4:
			begin
				temp = MUL;
				dest = 6;
				src1 = 4;
				src2 = 10;
			end

			SUB2:
			begin
				temp = SUB;
				dest = 0;
				src1 = 0;
				src2 = 6;
			end

			LOAD1:
			begin
				temp = LOADTWO;
				dest = 10;
			end

			WAIT1:
			begin
				next_modwait = 0;
			end

			LOAD2:
			begin
				temp = LOADTWO;
				dest = 9;
			end

			WAIT2:
			begin
				next_modwait = 0;
			end

			LOAD3:
			begin
				temp = LOADTWO;
				dest = 8;
			end

			WAIT3:
			begin
				next_modwait = 0;
			end

			LOAD4:
			begin
				temp = LOADTWO;
				dest = 7;
			end

			EIDLE:
			begin
				err = 1;
				next_modwait = 0;
			end
		endcase
	end
	assign op = temp;
endmodule



		
		

